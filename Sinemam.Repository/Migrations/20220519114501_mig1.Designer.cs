// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sinemam.Repository.AppDbContexts;

#nullable disable

namespace Sinemam.Repository.Migrations
{
    [DbContext(typeof(AppDbContexts.AppContext))]
    [Migration("20220519114501_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sinemam.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3806),
                            Description = "Aksiyon kategorisi deneme açıklaması",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Aksiyon",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3806)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3810),
                            Description = "Macera kategorisi deneme açıklaması",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Macera",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3810)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3813),
                            Description = "Aksiyon kategorisi deneme açıklaması",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Gerilim",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3814)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3817),
                            Description = "Yerli Dizi kategorisi deneme açıklaması",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Yerli Dizi",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3817)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3820),
                            Description = "Yabancı Dizi kategorisi deneme açıklaması",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Yabancı Dizi",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(3821)
                        });
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "John Wick Filmi Hakkında test yorumu",
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(7742),
                            IsActive = true,
                            IsDelete = false,
                            ShowId = 1,
                            Subject = "John Wick Filmi Hakkında",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(7745),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Imdb")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MinuteSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Shows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Country = "ABD",
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(9812),
                            Description = "John Wick, emekliye ayrılmış bir tetikçidir. Emekliliğinin tadını çıkarırken karısının yakalandığı amansız hastalıkla hayatı altüst olur. Karısından kendisine kalan en değerli varlığı ve can yoldaşı köpeğidir. Ancak evine dalan üç gangster onu da öldürür.",
                            Director = "Chad Stahelski",
                            ImageUrl = "https://tr.web.img2.acsta.net/pictures/14/10/14/15/30/266211.jpg",
                            Imdb = 8.5,
                            IsActive = true,
                            IsDelete = false,
                            MinuteSize = 90,
                            Name = "John Wick",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 866, DateTimeKind.Local).AddTicks(9813),
                            Year = 2014
                        });
                });

            modelBuilder.Entity("Sinemam.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 867, DateTimeKind.Local).AddTicks(970),
                            Email = "abc@outlook.com",
                            ImageUrl = "https://cdn.pixabay.com/photo/2020/07/14/13/07/icon-5404125_1280.png",
                            IsActive = true,
                            IsDelete = false,
                            Password = "111",
                            Role = "Ziyaretçi",
                            UpdatedDate = new DateTime(2022, 5, 19, 14, 45, 0, 867, DateTimeKind.Local).AddTicks(971),
                            Username = "bulent"
                        });
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Comment", b =>
                {
                    b.HasOne("Sinemam.Core.Entities.Show", "Show")
                        .WithMany("Comments")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sinemam.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Show", b =>
                {
                    b.HasOne("Sinemam.Core.Entities.Category", "Category")
                        .WithMany("Shows")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Category", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Sinemam.Core.Entities.Show", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Sinemam.Core.Entities.User", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
